Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }


ANSWER :- 

import java.util.Arrays;
 
class Main
{
    
    private static void merge(int[] X, int[] Y, int m, int n)
    {
        
        int k = m + n + 1;
 
        while (m >= 0 && n >= 0)
        {
            
            if (X[m] > Y[n]) {
                X[k--] = X[m--];
            }
            else {
                X[k--] = Y[n--];
            }
        }
 
        
        while (n >= 0) {
            X[k--] = Y[n--];
        }
 
        
        Arrays.fill(Y, 0);
    }
 
    
    public static void rearrange(int[] X, int[] Y)
    {
        // return if `X` is empty
        if (X.length == 0) {
            return;
        }
 
        
        int k = 0;
        for (int value: X)
        {
            if (value != 0) {
                X[k++] = value;
            }
        }
 
        
        merge(X, Y, k - 1, Y.length - 1);
    }
 
    public static void main (String[] args)
    {
        int[] X = { 0, 2, 0, 3, 0, 5, 6, 0, 0};
        int[] Y = { 1, 8, 9, 10, 15 };
 
        
            1. Both arrays `X[]` and `Y[]` should be sorted (ignore 0's in `X[]`)
            2. Size of array `X[]` >= size of array `Y[]` (i.e., `m >= n`)
            3. Total number of vacant cells in array `X[]` = size of array `Y[]` */
 
        
        rearrange(X, Y);
 
        System.out.println(Arrays.toString(X));
    }
}




Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199

ANSWER :-  

public class MaxSumPath {
    public static int maxSumPath(int[] X, int[] Y) {
        int sumX = 0, sumY = 0;
        int ptrX = 0, ptrY = 0;
        int maxSum = 0;

        while (ptrX < X.length && ptrY < Y.length) {
            if (X[ptrX] < Y[ptrY]) {
                sumX += X[ptrX++];
            } else if (X[ptrX] > Y[ptrY]) {
                sumY += Y[ptrY++];
            } else {
                maxSum += Math.max(sumX, sumY) + X[ptrX];
                sumX = 0;
                sumY = 0;
                ptrX++;
                ptrY++;
            }
        }

        
        while (ptrX < X.length) {
            sumX += X[ptrX++];
        }
        while (ptrY < Y.length) {
            sumY += Y[ptrY++];
        }

        maxSum += Math.max(sumX, sumY);

        return maxSum;
    }

    public static void main(String[] args) {
        int[] X = {3, 6, 7, 8, 10, 12, 15, 18, 100};
        int[] Y = {1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50};
        int result = maxSumPath(X, Y);
        System.out.println("The maximum sum path is: " + result);  
    }
}



Q3:Write a Java Program to count the number of words in a string using HashMap.

ANSWER :- 

import java.util.HashMap;

public class WordCounter {
    public static void main(String[] args) {
        String str = "This is a sample string with some words. This string will be used to demonstrate word counting.";

        HashMap<String, Integer> wordCount = countWords(str);

        
        System.out.println("Word Count:");
        for (String word : wordCount.keySet()) {
            System.out.println(word + ": " + wordCount.get(word));
        }
    }

    public static HashMap<String, Integer> countWords(String str) {
        
        String[] words = str.trim().split("\\s+");

        
        HashMap<String, Integer> wordCount = new HashMap<>();

        
        for (String word : words) {
            
            word = word.toLowerCase();
            
            if (wordCount.containsKey(word)) {
                wordCount.put(word, wordCount.get(word) + 1);
            } else {
                
                wordCount.put(word, 1);
            }
        }
        return wordCount;
    }
}



Q4:Write a Java Program to find the duplicate characters in a string.


ANSWER :- 


import java.util.HashMap;
import java.util.Map;

public class DuplicateCharacters {
    public static void main(String[] args) {
        String str = "hello world";
        
       
        Map<Character, Integer> duplicates = findDuplicateCharacters(str);
        
        System.out.println("Duplicate Characters:");
        for (char ch : duplicates.keySet()) {
            if (duplicates.get(ch) > 1) {
                System.out.println(ch + ": " + duplicates.get(ch));
            }
        }
    }

    public static Map<Character, Integer> findDuplicateCharacters(String str) {
       
        str = str.replaceAll("\\s", "").toLowerCase();
        
       
        Map<Character, Integer> charCount = new HashMap<>();
        
        
        for (char ch : str.toCharArray()) {
           
            if (charCount.containsKey(ch)) {

                charCount.put(ch, charCount.get(ch) + 1);
            } else { 
                charCount.put(ch, 1);
            }
        }
        
        return charCount;
    }
}


